// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name begini_ios_sdk
import AVFoundation
import SystemConfiguration.CaptiveNetwork
import Contacts
import CoreLocation
import EventKit
import Foundation
import Photos
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import zlib
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: begini_ios_sdk.CompressionLevel
  public static let bestSpeed: begini_ios_sdk.CompressionLevel
  public static let bestCompression: begini_ios_sdk.CompressionLevel
  public static let defaultCompression: begini_ios_sdk.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: begini_ios_sdk.GzipError.Kind, b: begini_ios_sdk.GzipError.Kind) -> Swift.Bool
  }
  public let kind: begini_ios_sdk.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: begini_ios_sdk.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers public class BeginiAuthorize : ObjectiveC.NSObject {
  public static let shared: begini_ios_sdk.BeginiAuthorize
  public func BeginiDataSdkOptions(integration_id: Swift.String, api_key: Swift.String, isContactsEnabled: Swift.Bool, isProfileEnabled: Swift.Bool, u_id: Swift.String, isBatteryEnabled: Swift.Bool, isWifiEnabled: Swift.Bool, isGalleryExifDataEnabled: Swift.Bool, isCalendarEnabled: Swift.Bool, isLocationEnabled: Swift.Bool, primaryColor: UIKit.UIColor, delegate: begini_ios_sdk.BeginiAuthorizeDelegate, presentingVC: UIKit.UIViewController)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum KDCircularProgressGlowMode : Swift.Int {
  case forward, reverse, constant, noGlow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @objcMembers @_Concurrency.MainActor(unsafe) public class KDCircularProgress : UIKit.UIView, QuartzCore.CAAnimationDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var progress: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var angle: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var startAngle: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var clockwise: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var roundedCorners: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var lerpColorMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientRotateSpeed: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var glowAmount: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var glowMode: begini_ios_sdk.KDCircularProgressGlowMode {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var progressThickness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var trackThickness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var trackColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var progressInsideFillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var progressColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreGraphics.CGRect, colors: UIKit.UIColor...)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func set(colors: UIKit.UIColor...)
  @objc @_Concurrency.MainActor(unsafe) public func animate(fromAngle: Swift.Double, toAngle: Swift.Double, duration: Foundation.TimeInterval, relativeDuration: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) public func animate(toAngle: Swift.Double, duration: Foundation.TimeInterval, relativeDuration: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) public func pauseAnimation()
  @objc @_Concurrency.MainActor(unsafe) public func stopAnimation()
  @objc @_Concurrency.MainActor(unsafe) public func isAnimating() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
public enum AuthorizationStatus {
  case success
  case failed
  case cancelled
  public static func == (a: begini_ios_sdk.AuthorizationStatus, b: begini_ios_sdk.AuthorizationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ProgressStatus {
  case permission_requesting
  case data_colletion
  case data_sending
  case scroe_generating
  case completed
  public static func == (a: begini_ios_sdk.ProgressStatus, b: begini_ios_sdk.ProgressStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BeginiAuthorizeDelegate : AnyObject {
  func onAuthorizeStarted()
  func onAuthorizeComplete(status: begini_ios_sdk.AuthorizationStatus)
  func onAuthorizeFailure(status: begini_ios_sdk.AuthorizationStatus, message: Swift.String)
  func onAuthorizeCancelled(status: begini_ios_sdk.AuthorizationStatus)
  func onStatusUpdate(status: begini_ios_sdk.ProgressStatus)
}
extension begini_ios_sdk.KDCircularProgressGlowMode : Swift.Equatable {}
extension begini_ios_sdk.KDCircularProgressGlowMode : Swift.Hashable {}
extension begini_ios_sdk.KDCircularProgressGlowMode : Swift.RawRepresentable {}
extension begini_ios_sdk.AuthorizationStatus : Swift.Equatable {}
extension begini_ios_sdk.AuthorizationStatus : Swift.Hashable {}
extension begini_ios_sdk.ProgressStatus : Swift.Equatable {}
extension begini_ios_sdk.ProgressStatus : Swift.Hashable {}
